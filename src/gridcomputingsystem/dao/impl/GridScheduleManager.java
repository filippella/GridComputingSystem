/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gridcomputingsystem.dao.impl;

import gridcomputingsystem.algorithm.AlgorithmPUDCERS;
import gridcomputingsystem.view.GridScheduleOutput;
import javax.swing.JFrame;

/**
 *
 * @author Filippo-TheAppExpert
 */
public class GridScheduleManager {

    private JobSchedulerBroker jobScheduler;
    private ResourceSchedulerBroker resourceScheduler;
    private final JFrame parent;

    public GridScheduleManager(JFrame parent) {
        this.parent = parent;
        initComponents();
    }

    private void initComponents() {
        jobScheduler = new JobSchedulerBroker();
        resourceScheduler = new ResourceSchedulerBroker();
    }

//    public PriorityQueue<Job> getJobsQueue() {
//        return jobsQueue;
//    }
    public JobSchedulerBroker getJobScheduler() {
        return jobScheduler;
    }

    public ResourceSchedulerBroker getResourceScheduler() {
        return resourceScheduler;
    }

    public void allocate() {
        System.out.println("Allocating");
    }

    /**
     *
     *
     * private PriorityQueue<Job> jobsQueue = new PriorityQueue<>();
     *
     * public void addJob(Job job) { this.jobsQueue.add(job); }
     *
     *
     * @param scheduleName
     */
    public void generateSchedule(String scheduleName) {
        pudcersAlgorithm();
        //schedulingAlgorithm1(scheduleName);
    }

    private void schedulingAlgorithm1(String scheduleName) {

        String indent = "    ";  // 4 spaces
        String code = "//This file is auto-generated by the GUI GridSim\n\n";
        code += "import java.util.*;\n";
        code += "import gridsim.*;\n";
        code += "import gridcomputingsystem.gridsim.*;\n";

        code += "\npublic class " + scheduleName + " \n{\n";
        code += "\n" + indent + "public static void main(String[] args) throws Exception {\n";

        indent += indent;   // now become 8 spaces
        code += "\n" + indent + "Calendar calendar = Calendar.getInstance();";
        code += "\n" + indent + "Random random;";
        code += "\n" + indent + "long seed = 11L*13*17*19*23+1;";
        code += "\n" + indent + "seed = seed * 97 + 1;";

        code += "\n";
        code += "\n" + indent + "String[] eff = {\"\"};";
        code += "\n" + indent + "String[] efp = {\"\"};";
        code += "\n" + indent + "String[] category = { ";
        code += "\"*.JOB.GridletCompletion\", \"*.JOB.TimeUtilization\", ";
        code += "\n" + indent + "    \"*.JOB.BudgetUtilization\" };";
        code += "\n" + indent + "String ReportWriterName = \"ReportWriter";
        code += scheduleName + "\";";

        int jobNum = jobScheduler.getAllItems().size();
        int resNum = resourceScheduler.getAllItems().size();

        code += "\n";
        code += "\n" + indent + "GridSim.init(" + jobNum;
        code += ", calendar, true, eff, efp, ReportWriterName);";

        code += "\n";
        code += "\n" + indent;
        code += "// budget values - at this stage, it is FIXED value";
        code += "\n" + indent + "//GridSim GUI could not handle it";
        code += "\n" + indent + "int start = 5000, end = 22000, inc = 1000;";
        code += "\n" + indent + "int numValue = ((end - start) / inc) + 1;";
        code += "\n" + indent + "double[] budgetValues = new double[numValue];";
        code += "\n" + indent + "for (int n=0, b=start; b <= end; n++, b += inc)";
        code += "\n" + indent + "    budgetValues[n] = b;";
        code += "\n";

        code += "\n" + indent + "//Create Report Writer Entity";
        code += "\n" + indent + "ReportWriter reportWriter = new ReportWriter(ReportWriterName, " + jobNum;
        code += ", " + resNum + ", \"reportFile" + scheduleName + "\", ";
        code += "\n" + indent + "    category, true, budgetValues, true, 10000);";

        code += "\n";
        code += "\n" + indent + "//------------------------------------\n";

        code += resourceScheduler.generateCode(indent);
        code += "\n";
        code += "\n" + indent + "//------------------------------------\n";
        code += jobScheduler.generateCode(indent);

        code += "\n" + indent + "// Start simulation";
        code += "\n" + indent + "GridSim.startGridSimulation();";
        code += "\n    }\n}";  // end of main and class

        GridScheduleOutput outputWindow = new GridScheduleOutput(parent, true);
        outputWindow.setGeneratedCode(code);
        outputWindow.setVisible(true);
    }

    private void pudcersAlgorithm() {
        AlgorithmPUDCERS pudcer = new AlgorithmPUDCERS(jobScheduler.getAllItems(), resourceScheduler.getAllItems());
        pudcer.schedule();
    }
}
