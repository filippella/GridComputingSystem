/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gridcomputingsystem.view;

import gridcomputingsystem.model.ItemActionListener;
import gridcomputingsystem.model.Machine;
import gridcomputingsystem.model.NumberKeyAdapter;
import gridcomputingsystem.model.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Filippo-TheAppExpert
 */
public class ResourceDialog extends javax.swing.JDialog {

    private final ItemActionListener.ResourceActionListener listener;
    private boolean editMode;
    private int resourceCount;
    private NumberKeyAdapter numberKeyAdapter;
    private final DefaultListModel<Machine> resourceListOfMachineModel = new DefaultListModel<>();
    private final DefaultTableModel tableModel = new DefaultTableModel();
    private List<Machine> resourceMachineList = new ArrayList<>();

    /**
     * Creates new form ResourceDialog
     *
     * @param parent
     * @param modal
     * @param listener
     */
    public ResourceDialog(java.awt.Frame parent, boolean modal, ItemActionListener.ResourceActionListener listener) {
        super(parent, modal);
        this.listener = listener;
        this.resourceCount = listener.getResourceCount();
        initComponents();
        resourceMachineProperties.setModel(tableModel);
        resourceListOfMachine.setModel(resourceListOfMachineModel);
        resourceListOfMachine.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        addMachinePropertyHeaders();
        addNumberCheckListener();
        addMachineListListener();
    }

    public void initializeResourcePropertiesRandomly() {
        initializeResourceProperties();
    }

    /**
     * @param editMode the editMode to set
     */
    public void setEditMode(boolean editMode) {
        this.editMode = editMode;
        if (editMode) {
            resourceSave.setText("Edit");
        }
    }

    public void setResourceCount(int resourceCount) {
        this.resourceCount = resourceCount;
    }

    /**
     * This method is used to set a resource properties in case a user wants to
     * edit the properties
     *
     * @param resource
     */
    public void setResource(Resource resource) {
        resourceName.setText(resource.getName());
        resourceBaudRate.setText(Double.toString(resource.getBaudRate()));
        resourcePeakLoad.setValue((int) resource.getPeakLoad());
        resourceOffPeakLoad.setValue((int) resource.getOffPeakLoad());
        resourceHolidayLoad.setValue((int) resource.getHolidayLoad());
        resourceArchitecture.setText(resource.getArchitecture());
        resourceTimeZone.setText(Double.toString(resource.getTimezone()));
        resourceGridApplicationOperation.setText(Double.toString(resource.getGridApplicationOperation()));
        resourceOperatingSystem.setText(resource.getOperatingSystem());
        resourceAllocationPolicy.setSelectedItem(resource.getAllocationPolicy());

        resourceMachineList = resource.getMachines();

        int machineCount = resourceMachineList.size();
        for (int i = 0; i < machineCount; i++) {
            resourceListOfMachineModel.addElement(resourceMachineList.get(i));
        }
        if (machineCount > 0) {
            resourceListOfMachine.setSelectedIndex(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        resourceName = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        resourceBaudRate = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        resourceArchitecture = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        resourceAllocationPolicy = new javax.swing.JComboBox();
        resourceOperatingSystem = new javax.swing.JTextField();
        resourceTimeZone = new javax.swing.JTextField();
        resourceGridApplicationOperation = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resourceListOfMachine = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        resourceMachineProperties = new javax.swing.JTable();
        resourceSave = new javax.swing.JButton();
        resourceReset = new javax.swing.JButton();
        resourcePeakLoad = new javax.swing.JSlider();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        resourceHolidayLoad = new javax.swing.JSlider();
        resourceOffPeakLoad = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel39.setText("Resource Name:");

        jLabel40.setText("Baud Rate:");

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Characteristic", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel50.setText("Architecture:");

        jLabel51.setText("Operating System:");

        jLabel52.setText("Time Zone (GMT):");

        jLabel53.setText("Grid $ / application operation:");

        jLabel22.setText("Allocation Policy:");

        resourceAllocationPolicy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Time-Shared", "Space-Shared" }));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel53)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resourceGridApplicationOperation))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resourceAllocationPolicy, 0, 211, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel51)
                            .addComponent(jLabel50)
                            .addComponent(jLabel52))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resourceTimeZone)
                            .addComponent(resourceOperatingSystem)
                            .addComponent(resourceArchitecture))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(resourceArchitecture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(resourceOperatingSystem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(resourceTimeZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(resourceGridApplicationOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(resourceAllocationPolicy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "List Of Machines", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jScrollPane2.setViewportView(resourceListOfMachine);

        jScrollPane3.setViewportView(resourceMachineProperties);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        resourceSave.setText("Save");
        resourceSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceSaveActionPerformed(evt);
            }
        });

        resourceReset.setText("Reset");
        resourceReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceResetActionPerformed(evt);
            }
        });

        resourcePeakLoad.setMajorTickSpacing(1);
        resourcePeakLoad.setMaximum(10);
        resourcePeakLoad.setPaintLabels(true);
        resourcePeakLoad.setPaintTicks(true);
        resourcePeakLoad.setToolTipText("");
        resourcePeakLoad.setValue(0);

        jLabel54.setText("Peak Load:");

        jLabel55.setText("Off Peak Load:");

        jLabel56.setText("Holiday Load:");

        resourceHolidayLoad.setMajorTickSpacing(1);
        resourceHolidayLoad.setMaximum(10);
        resourceHolidayLoad.setPaintLabels(true);
        resourceHolidayLoad.setPaintTicks(true);
        resourceHolidayLoad.setToolTipText("");
        resourceHolidayLoad.setValue(0);

        resourceOffPeakLoad.setMajorTickSpacing(1);
        resourceOffPeakLoad.setMaximum(10);
        resourceOffPeakLoad.setPaintLabels(true);
        resourceOffPeakLoad.setPaintTicks(true);
        resourceOffPeakLoad.setToolTipText("");
        resourceOffPeakLoad.setValue(0);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(resourceReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resourceSave))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel39)
                                    .addComponent(jLabel40)
                                    .addComponent(jLabel56)
                                    .addComponent(jLabel54)
                                    .addComponent(jLabel55))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(resourceHolidayLoad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(resourceBaudRate)
                                    .addComponent(resourcePeakLoad, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                    .addComponent(resourceName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(resourceOffPeakLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(resourceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel40)
                            .addComponent(resourceBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resourcePeakLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel54)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resourceOffPeakLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel55))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(resourceHolidayLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel56)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resourceReset)
                    .addComponent(resourceSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resourceResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceResetActionPerformed
        resetFields();
    }//GEN-LAST:event_resourceResetActionPerformed

    private void resourceSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceSaveActionPerformed
        performSaveResource();
    }//GEN-LAST:event_resourceSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox resourceAllocationPolicy;
    private javax.swing.JTextField resourceArchitecture;
    private javax.swing.JTextField resourceBaudRate;
    private javax.swing.JTextField resourceGridApplicationOperation;
    private javax.swing.JSlider resourceHolidayLoad;
    private javax.swing.JList resourceListOfMachine;
    private javax.swing.JTable resourceMachineProperties;
    private javax.swing.JTextField resourceName;
    private javax.swing.JSlider resourceOffPeakLoad;
    private javax.swing.JTextField resourceOperatingSystem;
    private javax.swing.JSlider resourcePeakLoad;
    private javax.swing.JButton resourceReset;
    private javax.swing.JButton resourceSave;
    private javax.swing.JTextField resourceTimeZone;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is responsible for resetting the fields of the form
     */
    private void resetFields() {
        resourceName.setText(null);
        resourceBaudRate.setText(null);
        resourceArchitecture.setText(null);
        resourceOperatingSystem.setText(null);
        resourceTimeZone.setText(null);
        resourceGridApplicationOperation.setText(null);
    }

    private void initializeResourceProperties() {
        resourceName.setText("Resource" + resourceCount);
        ResourceRandomPropertyGenerator resourceRandomPropertyGenerator = new ResourceRandomPropertyGenerator();
        resourceRandomPropertyGenerator.start();
    }

    /**
     * This method is for setting a key adapter for the Text fields
     */
    private void addNumberCheckListener() {
        numberKeyAdapter = new NumberKeyAdapter();
        resourceBaudRate.addKeyListener(numberKeyAdapter);
        resourceTimeZone.addKeyListener(numberKeyAdapter);
        resourceGridApplicationOperation.addKeyListener(numberKeyAdapter);
    }

    /**
     * This method validate the job form and pass a resource object to be saved
     * in the database
     */
    private void performSaveResource() {
        if (isValidResource()) {
            Resource resource = new Resource();
            UUID universallyUniqueId = UUID.randomUUID();
            resource.setResourceId(universallyUniqueId.toString());
            resource.setName(resourceName.getText());
            resource.setBaudRate(Double.parseDouble(resourceBaudRate.getText()));
            resource.setPeakLoad(resourcePeakLoad.getValue());
            resource.setOffPeakLoad(resourceOffPeakLoad.getValue());
            resource.setHolidayLoad(resourceHolidayLoad.getValue());
            resource.setArchitecture(resourceArchitecture.getText());
            resource.setTimezone(Double.parseDouble(resourceTimeZone.getText()));
            resource.setGridApplicationOperation(Double.parseDouble(resourceGridApplicationOperation.getText()));
            resource.setOperatingSystem(resourceOperatingSystem.getText());
            resource.setAllocationPolicyNumerically(resourceAllocationPolicy.getSelectedIndex());
            resource.setAllocationPolicy(resourceAllocationPolicy.getSelectedItem().toString());
            resource.setMachines(resourceMachineList);
            saveResource(resource);
        } else {
            JOptionPane.showMessageDialog(null, "One or more fields are empty, please check for all the empty fields int the form!", "Resource form needs to be valid", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * This method determines if one of the resource fields is empty
     *
     * @return true if there are non-empty fields in the form
     */
    private boolean isValidResource() {
        if (resourceName.getText().isEmpty()) {
            return false;
        } else if (resourceBaudRate.getText().isEmpty()) {
            return false;
        } else if (resourceArchitecture.getText().isEmpty()) {
            return false;
        } else if (resourceOperatingSystem.getText().isEmpty()) {
            return false;
        } else if (resourceTimeZone.getText().isEmpty()) {
            return false;
        } else {
            return !resourceGridApplicationOperation.getText().isEmpty();
        }
    }

    /**
     * Save the resource info
     *
     * @param resource
     */
    private void saveResource(Resource resource) {
        if (!this.editMode) {
            listener.onResourceAdded(resource, this.resourceCount);
        } else {
            listener.onResourceEdited(resource, this.resourceCount);
        }
        this.dispose();
    }

    private void addMachineListListener() {

        resourceListOfMachine.addListSelectionListener((ListSelectionEvent e) -> {
            tableModel.getDataVector().clear();
            int selectedPosition = resourceListOfMachine.getSelectedIndex();

            Machine machine = resourceListOfMachineModel.get(selectedPosition);

            machine.getMipsRating().entrySet().stream().forEach((entry) -> {
                tableModel.addRow(new String[]{Integer.toString(entry.getKey()), Integer.toString(entry.getValue())});
            });
        });
    }

    private void addMachinePropertyHeaders() {
        this.tableModel.addColumn("PE ID");
        this.tableModel.addColumn("MIPS RATING");
    }

    /**
     * Asynchronous class for generating random properties for new resources
     */
    private class ResourceRandomPropertyGenerator extends Thread {

        private final Random random;
        private final String[] architecture = {"Intel", "SGI", "Sun", "IRIX", "SOLARIS"};
        private final String[] os = {"Red Hat Linux", "Mandrake Linux", "Unix", "Windows XP", "Windows 2000", "Windows 98", "MacOS"};

        public ResourceRandomPropertyGenerator() {
            random = new Random(System.currentTimeMillis());
        }

        @Override
        public void run() {
            resourceBaudRate.setText(Double.toString(random.nextInt(200) / 10.0));
            resourcePeakLoad.setValue(random.nextInt(11));
            resourceOffPeakLoad.setValue(random.nextInt(11));
            resourceHolidayLoad.setValue(random.nextInt(11));

            resourceArchitecture.setText(architecture[random.nextInt(architecture.length)]);
            resourceOperatingSystem.setText(os[random.nextInt(os.length)]);
            resourceGridApplicationOperation.setText(Double.toString(random.nextDouble() * 10));

            resourceTimeZone.setText(Double.toString(random.nextInt(14)));
            resourceAllocationPolicy.setSelectedIndex(random.nextInt(2));

            int machineCount = random.nextInt(9);
            machineCount += 2;
            for (int i = 0; i < machineCount; i++) {
                Machine machine = new Machine(i, "Machine " + (i + 1), random, true);
                resourceMachineList.add(machine);
                resourceListOfMachineModel.addElement(machine);
            }
            if (machineCount > 0) {
                resourceListOfMachine.setSelectedIndex(0);
            }
        }
    }
}
