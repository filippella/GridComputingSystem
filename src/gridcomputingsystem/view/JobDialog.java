/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gridcomputingsystem.view;

import gridcomputingsystem.model.ItemActionListener;
import gridcomputingsystem.model.Job;
import gridcomputingsystem.model.NumberKeyAdapter;
import java.awt.event.ItemEvent;
import java.util.Random;
import java.util.UUID;
import javax.swing.JOptionPane;

/**
 *
 * @author Filippo-TheAppExpert
 */
public class JobDialog extends javax.swing.JDialog {

    private final ItemActionListener.JobActionListener listener;
    private NumberKeyAdapter numberKeyAdapter;
    private boolean editMode;
    private int jobCount;

    /**
     * Creates new form JobDialog
     *
     * @param parent
     * @param modal
     * @param listener
     */
    public JobDialog(java.awt.Frame parent, boolean modal, ItemActionListener.JobActionListener listener) {
        super(parent, modal);
        this.listener = listener;
        this.jobCount = listener.getJobCount();
        initComponents();
        addNumberCheckListener();
    }

    public void initializeJobPropertiesRandomly() {
        initializeJobProperties();
    }

    public void setJobCount(int jobCount) {
        this.jobCount = jobCount;
        jobName.setText("Job " + jobCount);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jobName = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jobBaudRate = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jobSimulationTimeHour = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jobSimulationTimeMinute = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jobSimulationTimeSecond = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jobExperimentDelaySecond = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jobSchedulingStrategy = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jobGridletSize = new javax.swing.JTextField();
        jobGridletMinDeviation = new javax.swing.JTextField();
        jobLengthSize = new javax.swing.JTextField();
        jobLengthMinDeviation = new javax.swing.JTextField();
        jobFileSize = new javax.swing.JTextField();
        jobFileMinDeviation = new javax.swing.JTextField();
        jobOutputSize = new javax.swing.JTextField();
        jobOutputMinDeviation = new javax.swing.JTextField();
        jobOutputMaxDeviation = new javax.swing.JTextField();
        jobLengthMaxDeviation = new javax.swing.JTextField();
        jobFileMaxDeviation = new javax.swing.JTextField();
        jobGridletMaxDeviation = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jobBudget = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jobDeadline = new javax.swing.JTextField();
        jobApproach = new javax.swing.JComboBox();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jobSave = new javax.swing.JButton();
        jobReset = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jobPriority = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel37.setText("Job Name:");

        jLabel38.setText("Baud Rate:");

        jLabel39.setText("Max. Simulation Time:");

        jLabel40.setText("Hour");

        jLabel41.setText("Minute");

        jLabel42.setText("Second");

        jLabel43.setText("Successive Experiment Delay:");

        jLabel44.setText("Second");

        jLabel45.setText("Scheduling Strategy:");

        jobSchedulingStrategy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Optimisation", "Optimise Cost", "Optimise Cost Plus", "Optimise Cost and Time", "Optimise Time" }));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Gridlet", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel46.setText("Gridlet:");

        jLabel47.setText("Length:");

        jLabel48.setText("File:");

        jLabel49.setText("Output:");

        jLabel50.setText("Size");

        jLabel51.setText("Min. Deviation(%)");

        jLabel52.setText("Max. Deviation(%)");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47)
                    .addComponent(jLabel48)
                    .addComponent(jLabel46)
                    .addComponent(jLabel49))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jobLengthSize, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobLengthMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobLengthMaxDeviation))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jobFileSize, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobFileMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobFileMaxDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jobOutputSize, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobOutputMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobOutputMaxDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel51))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jobGridletSize, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jobGridletMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel52)
                            .addComponent(jobGridletMaxDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(jLabel51)
                    .addComponent(jLabel52))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobGridletSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobGridletMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46)
                    .addComponent(jobGridletMaxDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobLengthSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobLengthMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47)
                    .addComponent(jobLengthMaxDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobFileSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobFileMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48)
                    .addComponent(jobFileMaxDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobOutputMinDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobOutputSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49)
                    .addComponent(jobOutputMaxDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Budget and Deadline", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel17.setText("Budget:");

        jLabel18.setText("Deadline:");

        jobApproach.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Factor-Based", "Value-Based" }));

        jLabel19.setText("Approach:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 51, 255));
        jLabel20.setText("Note:");

        jLabel53.setText("For Factor-Based, the range for both budget and deadline is [0.0, 1.0]");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jobApproach, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobBudget)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel53)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jobApproach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jobBudget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jobDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(jLabel20))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jobSave.setText("Save");
        jobSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobSaveActionPerformed(evt);
            }
        });

        jobReset.setText("Reset");
        jobReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobResetActionPerformed(evt);
            }
        });

        jLabel1.setText("Priority:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel38))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jobName)
                                    .addComponent(jobBaudRate)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel45)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jobSchedulingStrategy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jobPriority))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel39)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jobSimulationTimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel40)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jobSimulationTimeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel41)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jobSimulationTimeSecond, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel42))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel43)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jobExperimentDelaySecond, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel44))
                                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jobReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jobSave)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jobName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(jobBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jobSimulationTimeHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(jobSimulationTimeMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(jobSimulationTimeSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(jobExperimentDelaySecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44))
                .addGap(13, 13, 13)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jobSchedulingStrategy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jobPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobSave)
                    .addComponent(jobReset))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jobResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobResetActionPerformed
        resetFields();
    }//GEN-LAST:event_jobResetActionPerformed

    private void jobSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobSaveActionPerformed
        performSaveJob();
    }//GEN-LAST:event_jobSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jobApproach;
    private javax.swing.JTextField jobBaudRate;
    private javax.swing.JTextField jobBudget;
    private javax.swing.JTextField jobDeadline;
    private javax.swing.JTextField jobExperimentDelaySecond;
    private javax.swing.JTextField jobFileMaxDeviation;
    private javax.swing.JTextField jobFileMinDeviation;
    private javax.swing.JTextField jobFileSize;
    private javax.swing.JTextField jobGridletMaxDeviation;
    private javax.swing.JTextField jobGridletMinDeviation;
    private javax.swing.JTextField jobGridletSize;
    private javax.swing.JTextField jobLengthMaxDeviation;
    private javax.swing.JTextField jobLengthMinDeviation;
    private javax.swing.JTextField jobLengthSize;
    private javax.swing.JTextField jobName;
    private javax.swing.JTextField jobOutputMaxDeviation;
    private javax.swing.JTextField jobOutputMinDeviation;
    private javax.swing.JTextField jobOutputSize;
    private javax.swing.JTextField jobPriority;
    private javax.swing.JButton jobReset;
    private javax.swing.JButton jobSave;
    private javax.swing.JComboBox jobSchedulingStrategy;
    private javax.swing.JTextField jobSimulationTimeHour;
    private javax.swing.JTextField jobSimulationTimeMinute;
    private javax.swing.JTextField jobSimulationTimeSecond;
    // End of variables declaration//GEN-END:variables
    /**
     * This method is responsible for resetting the fields of the form
     */
    private void resetFields() {
        //jobName.setText(null);
        jobBaudRate.setText(null);
        jobSimulationTimeHour.setText(null);
        jobSimulationTimeMinute.setText(null);
        jobSimulationTimeSecond.setText(null);
        jobExperimentDelaySecond.setText(null);
        jobSchedulingStrategy.setSelectedIndex(0);
        jobPriority.setText(null);
        jobGridletSize.setText(null);
        jobGridletMinDeviation.setText(null);
        jobGridletMaxDeviation.setText(null);
        jobLengthSize.setText(null);
        jobLengthMinDeviation.setText(null);
        jobLengthMaxDeviation.setText(null);
        jobFileSize.setText(null);
        jobFileMinDeviation.setText(null);
        jobFileMaxDeviation.setText(null);
        jobOutputSize.setText(null);
        jobOutputMinDeviation.setText(null);
        jobOutputMaxDeviation.setText(null);
        jobApproach.setSelectedIndex(0);
        jobBudget.setText(null);
        jobDeadline.setText(null);
    }

    /**
     * This method validate the job form and pass a job object to be saved in
     * the database
     */
    private void performSaveJob() {
        if (isValidJob()) {
            Job job = new Job();
            UUID universallyUniqueId = UUID.randomUUID();
            job.setJobId(universallyUniqueId.toString());
            job.setName(jobName.getText());
            job.setBaudRate(Double.parseDouble(jobBaudRate.getText()));
            job.setMaxSimulationTimeHour(Double.parseDouble(jobSimulationTimeHour.getText()));
            job.setMaxSimulationTimeMinute(Double.parseDouble(jobSimulationTimeMinute.getText()));
            job.setMaxSimulationTimeSecond(Double.parseDouble(jobSimulationTimeSecond.getText()));
            job.setSuccessiveExperimentDelaySecond(Double.parseDouble(jobExperimentDelaySecond.getText()));
            job.setSchedulingStrategyNumber(jobSchedulingStrategy.getSelectedIndex());
            job.setSchedulingStrategy(jobSchedulingStrategy.getSelectedItem().toString());
            job.setPriority(Integer.parseInt(jobPriority.getText()));
            job.setGridletSize(Double.parseDouble(jobGridletSize.getText()));
            job.setGridletMinDeviation(Double.parseDouble(jobGridletMinDeviation.getText()));
            job.setGridletMaxDeviation(Double.parseDouble(jobGridletMaxDeviation.getText()));
            job.setLengthSize(Double.parseDouble(jobLengthSize.getText()));
            job.setLengthMinDeviation(Double.parseDouble(jobLengthMinDeviation.getText()));
            job.setLengthMaxDeviation(Double.parseDouble(jobLengthMaxDeviation.getText()));
            job.setFileSize(Double.parseDouble(jobFileSize.getText()));
            job.setFileMinDeviation(Double.parseDouble(jobFileMinDeviation.getText()));
            job.setFileMaxDeviation(Double.parseDouble(jobFileMaxDeviation.getText()));
            job.setOutputSize(Double.parseDouble(jobOutputSize.getText()));
            job.setOutputMinDeviation(Double.parseDouble(jobOutputMinDeviation.getText()));
            job.setOutputMaxDeviation(Double.parseDouble(jobOutputMaxDeviation.getText()));
            job.setApproachNumber(jobApproach.getSelectedIndex());
            job.setApproach(jobApproach.getSelectedItem().toString());
            job.setBudget(Double.parseDouble(jobBudget.getText()));
            job.setDeadline(Double.parseDouble(jobDeadline.getText()));

            saveJob(job);

        } else {
            JOptionPane.showMessageDialog(null, "One or more fields are empty, please check for all the empty fields int the form!", "Job form needs to be valid", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * This method determines if one of the job fields is empty
     *
     * @return true if there are non-empty fields in the form
     */
    private boolean isValidJob() {
        if (jobName.getText().isEmpty()) {
            return false;
        } else if (jobBaudRate.getText().isEmpty()) {
            return false;
        } else if (jobSimulationTimeHour.getText().isEmpty()) {
            return false;
        } else if (jobSimulationTimeMinute.getText().isEmpty()) {
            return false;
        } else if (jobSimulationTimeSecond.getText().isEmpty()) {
            return false;
        } else if (jobExperimentDelaySecond.getText().isEmpty()) {
            return false;
        } else if (jobPriority.getText().isEmpty()) {
            return false;
        } else if (jobGridletSize.getText().isEmpty()) {
            return false;
        } else if (jobGridletMinDeviation.getText().isEmpty()) {
            return false;
        } else if (jobGridletMaxDeviation.getText().isEmpty()) {
            return false;
        } else if (jobLengthSize.getText().isEmpty()) {
            return false;
        } else if (jobLengthMinDeviation.getText().isEmpty()) {
            return false;
        } else if (jobLengthMaxDeviation.getText().isEmpty()) {
            return false;
        } else if (jobFileSize.getText().isEmpty()) {
            return false;
        } else if (jobFileMinDeviation.getText().isEmpty()) {
            return false;
        } else if (jobFileMaxDeviation.getText().isEmpty()) {
            return false;
        } else if (jobOutputSize.getText().isEmpty()) {
            return false;
        } else if (jobOutputMinDeviation.getText().isEmpty()) {
            return false;
        } else if (jobOutputMaxDeviation.getText().isEmpty()) {
            return false;
        } else if (jobBudget.getText().isEmpty()) {
            return false;
        } else {
            return !jobDeadline.getText().isEmpty();
        }
    }

    private void initializeJobProperties() {
        jobName.setText("Job " + jobCount);
        JobRandomPropertyGenerator jobRandomPropertyGenerator = new JobRandomPropertyGenerator();
        jobRandomPropertyGenerator.start();
        jobApproach.addItemListener((ItemEvent event) -> {
            if (event.getStateChange() == ItemEvent.SELECTED) {
                int selectedFactorApproach = jobApproach.getSelectedIndex();
                jobRandomPropertyGenerator.selectApproach(selectedFactorApproach);
            }
        });
    }

    /**
     * This method is for setting a key adapter for the Text fields
     */
    private void addNumberCheckListener() {
        numberKeyAdapter = new NumberKeyAdapter();
        jobBaudRate.addKeyListener(numberKeyAdapter);
        jobSimulationTimeHour.addKeyListener(numberKeyAdapter);
        jobSimulationTimeMinute.addKeyListener(numberKeyAdapter);
        jobSimulationTimeSecond.addKeyListener(numberKeyAdapter);
        jobExperimentDelaySecond.addKeyListener(numberKeyAdapter);
        jobPriority.addKeyListener(numberKeyAdapter);
        jobGridletSize.addKeyListener(numberKeyAdapter);
        jobGridletMinDeviation.addKeyListener(numberKeyAdapter);
        jobGridletMaxDeviation.addKeyListener(numberKeyAdapter);
        jobLengthSize.addKeyListener(numberKeyAdapter);
        jobLengthMinDeviation.addKeyListener(numberKeyAdapter);
        jobLengthMaxDeviation.addKeyListener(numberKeyAdapter);
        jobFileSize.addKeyListener(numberKeyAdapter);
        jobFileMinDeviation.addKeyListener(numberKeyAdapter);
        jobFileMaxDeviation.addKeyListener(numberKeyAdapter);
        jobOutputSize.addKeyListener(numberKeyAdapter);
        jobOutputMinDeviation.addKeyListener(numberKeyAdapter);
        jobOutputMaxDeviation.addKeyListener(numberKeyAdapter);
        jobBudget.addKeyListener(numberKeyAdapter);
        jobDeadline.addKeyListener(numberKeyAdapter);
    }

    /**
     * Save the job info
     *
     * @param job
     */
    private void saveJob(Job job) {
        if (!this.editMode) {
            listener.onJobAdded(job, this.jobCount);
        } else {
            listener.onJobEdited(job, this.jobCount);
        }
        this.dispose();
    }

    /**
     * This method is used to set a job properties in case a user wants to edit
     * the properties
     *
     * @param job the information holder
     */
    public void setJob(Job job) {
        jobName.setText(job.getName());
        jobBaudRate.setText(Double.toString(job.getBaudRate()));
        jobSimulationTimeHour.setText(Double.toString(job.getMaxSimulationTimeHour()));
        jobSimulationTimeMinute.setText(Double.toString(job.getMaxSimulationTimeMinute()));
        jobSimulationTimeSecond.setText(Double.toString(job.getMaxSimulationTimeSecond()));
        jobExperimentDelaySecond.setText(Double.toString(job.getSuccessiveExperimentDelaySecond()));
        jobSchedulingStrategy.setSelectedItem(job.getSchedulingStrategy());
        jobPriority.setText(Integer.toString(job.getPriority()));
        jobGridletSize.setText(Double.toString(job.getGridletSize()));
        jobGridletMinDeviation.setText(Double.toString(job.getGridletMinDeviation()));
        jobGridletMaxDeviation.setText(Double.toString(job.getGridletMaxDeviation()));
        jobLengthSize.setText(Double.toString(job.getLengthSize()));
        jobLengthMinDeviation.setText(Double.toString(job.getLengthMinDeviation()));
        jobLengthMaxDeviation.setText(Double.toString(job.getLengthMaxDeviation()));
        jobFileSize.setText(Double.toString(job.getFileSize()));
        jobFileMinDeviation.setText(Double.toString(job.getFileMinDeviation()));
        jobFileMaxDeviation.setText(Double.toString(job.getFileMaxDeviation()));
        jobOutputSize.setText(Double.toString(job.getOutputSize()));
        jobOutputMinDeviation.setText(Double.toString(job.getOutputMinDeviation()));
        jobOutputMaxDeviation.setText(Double.toString(job.getOutputMaxDeviation()));
        jobApproach.setSelectedItem(job.getApproach());
        jobBudget.setText(Double.toString(job.getBudget()));
        jobDeadline.setText(Double.toString(job.getDeadline()));
    }

    public void setEditMode(boolean editMode) {
        this.editMode = editMode;
        if (editMode) {
            jobSave.setText("Edit");
        }
    }

    /**
     * Asynchronous class for generating random properties for new jobs
     */
    private class JobRandomPropertyGenerator extends Thread {

        private final Random random;
        private static final int MAX = 101;
        private static final double DIVIDER = 10.0;

        public JobRandomPropertyGenerator() {
            random = new Random(System.currentTimeMillis());
        }

        @Override
        public void run() {

            jobBaudRate.setText(Double.toString(random.nextInt(MAX) / DIVIDER));

            jobSimulationTimeHour.setText(Integer.toString(random.nextInt(MAX)));
            jobSimulationTimeMinute.setText(Integer.toString(random.nextInt(MAX)));
            jobSimulationTimeSecond.setText(Integer.toString(random.nextInt(MAX)));

            jobExperimentDelaySecond.setText(Double.toString(random.nextInt(MAX)));
            jobSchedulingStrategy.setSelectedIndex(random.nextInt(jobSchedulingStrategy.getItemCount()));

            jobPriority.setText(Integer.toString(random.nextInt(9) + 1));

            jobGridletSize.setText(Integer.toString(random.nextInt(MAX)));
            jobGridletMinDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));
            jobGridletMaxDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));

            jobLengthSize.setText(Integer.toString(random.nextInt(MAX)));
            jobLengthMinDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));
            jobLengthMaxDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));

            jobFileSize.setText(Integer.toString(random.nextInt(MAX)));
            jobFileMinDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));
            jobFileMaxDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));

            jobOutputSize.setText(Integer.toString(random.nextInt(MAX)));
            jobOutputMinDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));
            jobOutputMaxDeviation.setText(Double.toString(random.nextInt(MAX) / DIVIDER));

            int selectedFactorApproach = random.nextInt(jobApproach.getItemCount());
            selectApproach(selectedFactorApproach);
        }

        /**
         * This method is to generate factor approach dynamically also on item
         * changed from the JComboBox
         *
         * @param selectedFactorApproach
         */
        public void selectApproach(int selectedFactorApproach) {

            jobApproach.setSelectedIndex(selectedFactorApproach);

            if (selectedFactorApproach == 0) {
                jobBudget.setText(Double.toString(random.nextInt(MAX) / (DIVIDER * DIVIDER)));
                jobDeadline.setText(Double.toString(random.nextInt(MAX) / (DIVIDER * DIVIDER)));
            } else {
                jobBudget.setText(Double.toString(random.nextInt(MAX)));
                jobDeadline.setText(Double.toString(random.nextInt(MAX)));
            }
        }
    }
}
