/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gridcomputingsystem.view;

import gridcomputingsystem.model.utilities.DefaultFileFilter;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Filippo-TheAppExpert
 */
public class GridScheduleOutput extends javax.swing.JDialog {

    /**
     * Creates new form GridScheduleOutput
     *
     * @param parent
     * @param modal
     */
    public GridScheduleOutput(JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Grid Schedule Algorithm Output");
        setLocationRelativeTo(parent);
    }

    public void setGeneratedCode(String generatedCode) {
        this.generatedContent.setText(generatedCode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        generatedContent = new javax.swing.JTextPane();
        print = new javax.swing.JButton();
        save = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        generatedContent.setEditable(false);
        jScrollPane1.setViewportView(generatedContent);

        print.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gridcomputingsystem/view/images/print.png"))); // NOI18N
        print.setText("Print");
        print.setToolTipText("");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gridcomputingsystem/view/images/save.png"))); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 475, Short.MAX_VALUE)
                        .addComponent(save)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(print)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(print, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        try {
            this.generatedContent.print();
        } catch (PrinterException ex) {
            System.err.println("Error occured while trying to print the document!!!");
        }
    }//GEN-LAST:event_printActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        exportAsJavaFile();
    }//GEN-LAST:event_saveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane generatedContent;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton print;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables

    private void exportAsJavaFile() {

        DefaultFileFilter filter = new DefaultFileFilter("java", "Java Files");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Generate GridSim code");
        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showSaveDialog(getParent());
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File file = fileChooser.getSelectedFile();
        String ext = filter.getExtension(file);

        String name = file.getAbsolutePath();

        // if the filename has no extension, then attach
        if (ext == null) {
            name += ".java";
        }

        // if a file already exists, then double check with user
        File newFile = new File(name);
        if (newFile.exists() == true) {
            String msg = name + " already exists.\n";
            msg += "Do you want to replace it?";
            if (confirmAction(msg, "Generate GridSim code") == false) {
                return;
            }
        }

        try {
            FileOutputStream out = new FileOutputStream(name);
            out.write(this.generatedContent.getText().getBytes());
            out.close();
        } catch (Exception e) {
            makeBeepSound();
            JOptionPane.showMessageDialog(getParent(), "Sorry, cannot generate Java file.", "Generate GridSim code", JOptionPane.ERROR_MESSAGE);
        }
        makeBeepSound();
        JOptionPane.showMessageDialog(getParent(), "Finish generating Java code.", "Generate GridSim code", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method is responsible for checking weather there is already
     * generated code in the same package
     *
     * @param msg
     * @param type
     * @return
     */
    private boolean confirmAction(String msg, String type) {
        JOptionPane optionPane = new JOptionPane();
        optionPane.setMessage(msg);
        JDialog dialog = optionPane.createDialog(getParent(), type);
        makeBeepSound();
        dialog.show();

        // put try and catch, just in-case the something wrong with casting
        try {
            int value = ((Integer) optionPane.getValue());
            if (value == JOptionPane.YES_OPTION) {
                return true;
            }
        } catch (Exception e) {
            //System.out.println("Exception occurs " + e.getMessage());
        }

        return false;
    }

    private void makeBeepSound() {
        Toolkit.getDefaultToolkit().beep();
    }
}
